// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer/Lexer.jflex

package fr.ubordeaux.deptinfo.compilation.lea.parser;

import java.io.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class ParserLexer implements Parser.Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\23\0\1\3\1\4\2\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\12\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\0\4\27\1\30\25\27\1\31\1\0\1\32"+
    "\1\0\1\27\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\27\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\27\1\63\1\64\1\65"+
    "\7\0\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\1\21\1\22\1\23\1\24"+
    "\1\25\20\23\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\0\1\44\1\45\2\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\5\23\1\54\10\23\1\55"+
    "\1\23\1\56\20\23\1\57\1\60\1\61\1\62\1\0"+
    "\1\63\1\0\1\63\1\64\1\65\14\23\1\66\5\23"+
    "\1\67\11\23\1\70\6\23\1\71\1\44\2\23\1\72"+
    "\4\23\1\73\1\74\11\23\1\75\1\76\1\77\1\100"+
    "\11\23\1\101\1\102\4\23\1\103\1\104\1\23\1\105"+
    "\3\23\1\106\1\107\13\23\1\110\4\23\1\111\1\112"+
    "\10\23\1\113\6\23\1\114\1\115\1\116\1\117\2\23"+
    "\1\120\4\23\1\121\2\23\1\122\2\23\1\123\2\23"+
    "\1\124\1\125\1\23\1\126\1\23\1\127\1\130\2\23"+
    "\1\131\5\23\1\132\1\133\1\134\1\135\1\136\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\66"+
    "\0\66\0\u017a\0\u01b0\0\66\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\66\0\u02f4\0\u032a\0\u0360\0\66\0\u0396\0\66"+
    "\0\66\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0"+
    "\0\u06f6\0\66\0\u072c\0\66\0\66\0\242\0\66\0\66"+
    "\0\u0762\0\66\0\u0798\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u07ce\0\u0804\0\66\0\u083a\0\u0870\0\66\0\u08a6"+
    "\0\66\0\66\0\66\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0396\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0396\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\66\0\u0f9c\0\66"+
    "\0\66\0\u0fd2\0\u1008\0\u103e\0\u103e\0\66\0\66\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u0396\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u0396\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\66\0\66\0\u176a\0\u17a0\0\u0396\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u0396\0\u0396\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u0396\0\u0396"+
    "\0\66\0\u0396\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u0396\0\u0396\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u0396\0\u0396\0\u1d52\0\u0396\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u0396\0\u0396\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u0396\0\u207c\0\u20b2"+
    "\0\u20e8\0\u211e\0\u0396\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u0396\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u0396\0\u0396\0\u0396\0\u0396\0\u247e"+
    "\0\u24b4\0\u0396\0\u24ea\0\u2520\0\u2556\0\u258c\0\u0396\0\u25c2"+
    "\0\u25f8\0\u0396\0\u262e\0\u2664\0\u0396\0\u269a\0\u26d0\0\u0396"+
    "\0\u0396\0\u2706\0\u0396\0\u273c\0\66\0\u0396\0\u2772\0\u27a8"+
    "\0\u0396\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u0396\0\u0396"+
    "\0\u0396\0\u0396\0\u0396\0\u0396";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\1\31"+
    "\1\27\1\32\1\33\1\34\1\35\1\36\2\27\1\37"+
    "\1\27\1\40\1\41\1\42\1\43\1\44\1\27\1\45"+
    "\1\46\1\47\1\27\1\50\1\51\2\27\1\52\1\53"+
    "\1\54\112\0\1\55\41\0\4\56\1\57\61\56\24\0"+
    "\1\60\47\0\1\61\15\0\1\62\41\0\7\63\1\0"+
    "\56\63\24\0\1\64\54\0\1\65\10\0\1\66\56\0"+
    "\1\67\6\0\1\70\57\0\1\71\61\0\1\72\4\0"+
    "\1\73\4\0\1\74\57\0\1\75\1\0\1\20\7\0"+
    "\1\76\6\0\1\76\52\0\1\77\64\0\1\100\1\101"+
    "\65\0\1\102\65\0\1\103\1\104\60\0\1\27\6\0"+
    "\2\27\2\0\30\27\23\0\1\27\6\0\2\27\2\0"+
    "\15\27\1\105\2\27\1\106\7\27\23\0\1\27\6\0"+
    "\2\27\2\0\7\27\1\107\2\27\1\110\2\27\1\111"+
    "\12\27\23\0\1\27\6\0\2\27\2\0\15\27\1\112"+
    "\12\27\23\0\1\27\6\0\2\27\2\0\12\27\1\113"+
    "\1\27\1\114\2\27\1\115\6\27\1\116\1\27\23\0"+
    "\1\27\6\0\2\27\2\0\10\27\1\117\1\27\1\120"+
    "\2\27\1\121\5\27\1\122\4\27\23\0\1\27\6\0"+
    "\2\27\2\0\5\27\1\123\5\27\1\124\1\125\13\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\126\17\27"+
    "\23\0\1\27\6\0\2\27\2\0\1\127\27\27\23\0"+
    "\1\27\6\0\2\27\2\0\4\27\1\130\16\27\1\131"+
    "\4\27\23\0\1\27\6\0\2\27\2\0\16\27\1\132"+
    "\11\27\23\0\1\27\6\0\2\27\2\0\20\27\1\133"+
    "\2\27\1\134\4\27\23\0\1\27\6\0\2\27\2\0"+
    "\1\135\3\27\1\136\23\27\23\0\1\27\6\0\2\27"+
    "\2\0\4\27\1\137\15\27\1\140\5\27\23\0\1\27"+
    "\6\0\2\27\2\0\7\27\1\141\17\27\1\142\23\0"+
    "\1\27\6\0\2\27\2\0\10\27\1\143\17\27\23\0"+
    "\1\27\6\0\2\27\2\0\7\27\1\144\10\27\1\145"+
    "\7\27\27\0\1\146\37\0\1\147\25\0\1\150\50\0"+
    "\1\151\56\0\12\72\1\152\53\72\2\73\1\0\63\73"+
    "\20\0\1\153\60\0\1\154\1\0\1\154\2\0\1\155"+
    "\71\0\1\156\65\0\1\157\61\0\1\27\6\0\2\27"+
    "\2\0\15\27\1\160\12\27\23\0\1\27\6\0\2\27"+
    "\2\0\4\27\1\161\23\27\23\0\1\27\6\0\2\27"+
    "\2\0\1\162\27\27\23\0\1\27\6\0\2\27\2\0"+
    "\1\163\27\27\23\0\1\27\6\0\2\27\2\0\13\27"+
    "\1\164\1\165\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\21\27\1\166\6\27\23\0\1\27\6\0\2\27\2\0"+
    "\23\27\1\167\4\27\23\0\1\27\6\0\2\27\2\0"+
    "\23\27\1\170\4\27\23\0\1\27\6\0\2\27\2\0"+
    "\22\27\1\171\5\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\172\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\15\27\1\173\12\27\23\0\1\27\6\0\2\27\2\0"+
    "\20\27\1\174\7\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\175\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\16\27\1\176\11\27\23\0\1\27\6\0\2\27\2\0"+
    "\22\27\1\177\5\27\23\0\1\27\6\0\2\27\2\0"+
    "\21\27\1\200\6\27\23\0\1\27\6\0\2\27\2\0"+
    "\10\27\1\201\5\27\1\202\11\27\23\0\1\27\6\0"+
    "\2\27\2\0\25\27\1\203\2\27\23\0\1\27\6\0"+
    "\2\27\2\0\12\27\1\204\15\27\23\0\1\27\6\0"+
    "\2\27\2\0\4\27\1\205\23\27\23\0\1\27\6\0"+
    "\2\27\2\0\10\27\1\206\4\27\1\207\12\27\23\0"+
    "\1\27\6\0\2\27\2\0\1\27\1\210\26\27\23\0"+
    "\1\27\6\0\2\27\2\0\14\27\1\211\13\27\23\0"+
    "\1\27\6\0\2\27\2\0\1\212\21\27\1\213\5\27"+
    "\23\0\1\27\6\0\2\27\2\0\22\27\1\214\5\27"+
    "\23\0\1\27\6\0\2\27\2\0\20\27\1\215\7\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\216\17\27"+
    "\23\0\1\27\6\0\2\27\2\0\16\27\1\217\11\27"+
    "\23\0\1\27\6\0\2\27\2\0\20\27\1\220\7\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\221\17\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\222\17\27"+
    "\27\0\1\223\41\0\12\72\1\152\4\72\1\224\46\72"+
    "\20\0\1\153\7\0\1\76\6\0\1\76\46\0\1\155"+
    "\65\0\1\27\6\0\2\27\2\0\12\27\1\225\15\27"+
    "\23\0\1\27\6\0\2\27\2\0\1\226\27\27\23\0"+
    "\1\27\6\0\2\27\2\0\20\27\1\227\7\27\23\0"+
    "\1\27\6\0\2\27\2\0\21\27\1\230\6\27\23\0"+
    "\1\27\6\0\2\27\2\0\16\27\1\231\11\27\23\0"+
    "\1\27\6\0\2\27\2\0\21\27\1\232\1\233\5\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\234\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\13\27\1\235\14\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\236\17\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\237\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\1\240\27\27\23\0"+
    "\1\27\6\0\2\27\2\0\1\241\27\27\23\0\1\27"+
    "\6\0\2\27\2\0\4\27\1\242\23\27\23\0\1\27"+
    "\6\0\2\27\2\0\2\27\1\243\25\27\23\0\1\27"+
    "\6\0\2\27\2\0\12\27\1\244\2\27\1\245\12\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\246\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\22\27\1\247\5\27"+
    "\23\0\1\27\6\0\2\27\2\0\14\27\1\250\13\27"+
    "\4\0\1\251\16\0\1\27\6\0\2\27\2\0\30\27"+
    "\23\0\1\27\6\0\2\27\2\0\12\27\1\252\15\27"+
    "\23\0\1\27\6\0\2\27\2\0\20\27\1\253\7\27"+
    "\23\0\1\27\6\0\2\27\2\0\24\27\1\254\3\27"+
    "\23\0\1\27\6\0\2\27\2\0\2\27\1\255\17\27"+
    "\1\256\5\27\23\0\1\27\6\0\2\27\2\0\12\27"+
    "\1\257\15\27\23\0\1\27\6\0\2\27\2\0\6\27"+
    "\1\260\21\27\23\0\1\27\6\0\2\27\2\0\3\27"+
    "\1\261\24\27\23\0\1\27\6\0\2\27\2\0\23\27"+
    "\1\262\4\27\23\0\1\27\6\0\2\27\2\0\10\27"+
    "\1\263\17\27\23\0\1\27\6\0\2\27\2\0\21\27"+
    "\1\264\6\27\23\0\1\27\6\0\2\27\2\0\4\27"+
    "\1\265\23\27\23\0\1\27\6\0\2\27\2\0\22\27"+
    "\1\266\5\27\23\0\1\27\6\0\2\27\2\0\12\27"+
    "\1\267\15\27\23\0\1\27\6\0\2\27\2\0\22\27"+
    "\1\270\5\27\23\0\1\27\6\0\2\27\2\0\4\27"+
    "\1\271\23\27\23\0\1\27\6\0\2\27\2\0\11\27"+
    "\1\272\16\27\23\0\1\27\6\0\2\27\2\0\21\27"+
    "\1\273\6\27\23\0\1\27\6\0\2\27\2\0\1\274"+
    "\27\27\23\0\1\27\6\0\2\27\2\0\22\27\1\275"+
    "\5\27\23\0\1\27\6\0\2\27\2\0\10\27\1\276"+
    "\17\27\23\0\1\27\6\0\2\27\2\0\24\27\1\277"+
    "\3\27\23\0\1\27\6\0\2\27\2\0\14\27\1\300"+
    "\13\27\23\0\1\27\6\0\2\27\2\0\12\27\1\301"+
    "\15\27\23\0\1\27\6\0\2\27\2\0\22\27\1\302"+
    "\5\27\23\0\1\27\6\0\2\27\2\0\1\303\27\27"+
    "\23\0\1\27\6\0\2\27\2\0\22\27\1\304\5\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\305\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\20\27\1\306\7\27"+
    "\23\0\1\27\6\0\2\27\2\0\6\27\1\307\11\27"+
    "\1\310\7\27\23\0\1\27\6\0\2\27\2\0\1\311"+
    "\27\27\23\0\1\27\6\0\2\27\2\0\1\312\27\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\313\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\314\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\10\27\1\315\17\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\316\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\12\27\1\317\15\27"+
    "\23\0\1\27\6\0\2\27\2\0\20\27\1\320\7\27"+
    "\23\0\1\27\6\0\2\27\2\0\14\27\1\321\13\27"+
    "\23\0\1\27\6\0\2\27\2\0\23\27\1\322\4\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\323\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\4\27\1\324\23\27"+
    "\23\0\1\27\6\0\2\27\2\0\1\325\27\27\23\0"+
    "\1\27\6\0\2\27\2\0\20\27\1\326\7\27\23\0"+
    "\1\27\6\0\2\27\2\0\14\27\1\327\13\27\23\0"+
    "\1\27\6\0\2\27\2\0\1\330\27\27\23\0\1\27"+
    "\6\0\2\27\2\0\3\27\1\331\24\27\23\0\1\27"+
    "\6\0\2\27\2\0\2\27\1\332\25\27\23\0\1\27"+
    "\6\0\2\27\2\0\10\27\1\333\17\27\23\0\1\27"+
    "\6\0\2\27\2\0\13\27\1\334\14\27\23\0\1\27"+
    "\6\0\2\27\2\0\22\27\1\335\5\27\23\0\1\27"+
    "\6\0\2\27\2\0\4\27\1\336\23\27\23\0\1\27"+
    "\6\0\2\27\2\0\5\27\1\337\22\27\23\0\1\27"+
    "\6\0\2\27\2\0\22\27\1\340\5\27\23\0\1\27"+
    "\6\0\2\27\2\0\22\27\1\341\5\27\23\0\1\27"+
    "\6\0\2\27\2\0\3\27\1\342\24\27\23\0\1\27"+
    "\6\0\2\27\2\0\2\27\1\343\25\27\23\0\1\27"+
    "\6\0\2\27\2\0\2\27\1\344\25\27\23\0\1\27"+
    "\6\0\2\27\2\0\14\27\1\345\13\27\23\0\1\27"+
    "\6\0\2\27\2\0\14\27\1\346\13\27\23\0\1\27"+
    "\6\0\2\27\2\0\6\27\1\347\21\27\23\0\1\27"+
    "\6\0\2\27\2\0\1\350\27\27\23\0\1\27\6\0"+
    "\2\27\2\0\12\27\1\351\15\27\23\0\1\27\6\0"+
    "\2\27\2\0\14\27\1\352\13\27\23\0\1\27\6\0"+
    "\2\27\2\0\1\353\27\27\23\0\1\27\6\0\2\27"+
    "\2\0\23\27\1\354\4\27\23\0\1\27\6\0\2\27"+
    "\2\0\12\27\1\355\15\27\23\0\1\27\6\0\2\27"+
    "\2\0\21\27\1\356\6\27\23\0\1\27\6\0\2\27"+
    "\2\0\7\27\1\357\20\27\23\0\1\27\6\0\2\27"+
    "\2\0\15\27\1\360\12\27\23\0\1\27\6\0\2\27"+
    "\2\0\4\27\1\361\23\27\23\0\1\27\6\0\2\27"+
    "\2\0\20\27\1\362\7\27\23\0\1\27\6\0\2\27"+
    "\2\0\1\363\27\27\23\0\1\27\6\0\2\27\2\0"+
    "\15\27\1\364\12\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\365\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\23\27\1\366\4\27\23\0\1\27\6\0\2\27\2\0"+
    "\22\27\1\367\5\27\23\0\1\27\6\0\2\27\2\0"+
    "\12\27\1\370\15\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\371\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\1\27\1\372\26\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\373\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\374\23\27\4\0\1\375\16\0\1\27\6\0"+
    "\2\27\2\0\30\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\376\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\377\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\2\27\1\u0100\25\27\23\0\1\27\6\0\2\27\2\0"+
    "\20\27\1\u0101\7\27\23\0\1\27\6\0\2\27\2\0"+
    "\20\27\1\u0102\7\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\u0103\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\12\27\1\u0104\15\27\23\0\1\27\6\0\2\27\2\0"+
    "\14\27\1\u0105\13\27\23\0\1\27\6\0\2\27\2\0"+
    "\22\27\1\u0106\5\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\u0107\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\u0108\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\3\27\1\u0109\24\27\23\0\1\27\6\0\2\27\2\0"+
    "\4\27\1\u010a\23\27\23\0\1\27\6\0\2\27\2\0"+
    "\22\27\1\u010b\5\27\23\0\1\27\6\0\2\27\2\0"+
    "\21\27\1\u010c\6\27\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\2\1\1\11\5\1\1\11"+
    "\3\1\1\11\1\1\2\11\20\1\1\11\1\1\2\11"+
    "\1\0\2\11\1\1\1\11\1\0\6\11\1\0\1\1"+
    "\1\11\2\0\1\11\1\1\3\11\42\1\1\11\1\1"+
    "\2\11\1\0\1\1\1\0\1\1\2\11\43\1\2\11"+
    "\24\1\1\11\123\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private final boolean DEBUGGING = false;
  
  private Position startPos = new Position(0, 0);
  private Position endPos = new Position(0, 0);
  private Object lVal;

    /**
     * Method to retrieve the beginning position of the last scanned token.
     * @return the position at which the last scanned token starts.
     */
    public Position getStartPos(){
 	   return startPos;
    }

    /**
     * Method to retrieve the ending position of the last scanned token.
     * @return the first position beyond the last scanned token.
     */
    public Position getEndPos(){
    	   return endPos;
    }

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.
     */
    public Object getLVal(){
        return lVal;
    }
    
  /**
   * Fetch the next token.  Called yylex in pull parsers.
   */
  public int yylex() throws IOException {
    startPos = new Position(yyline, yycolumn);
    int ttype = nextToken();
    endPos = new Position(yyline, yycolumn);
    return ttype;
  }

  /**
   * Build and emit a syntax error message.
   */
  public void reportSyntaxError(Parser.Context ctx) {
    System.err.print(ctx.getLocation() + ": syntax error");
      final int TOKENMAX = 10;
      Parser.SymbolKind[] arg = new Parser.SymbolKind[TOKENMAX];
      int n = ctx.getExpectedTokens(arg, TOKENMAX);
      for (int i = 0; i < n; ++i)
        System.err.print((i == 0 ? ": expected " : " or ")
                         + arg[i].getName());
      Parser.SymbolKind lookahead = ctx.getToken();
      if (lookahead != null)
        System.err.print(" before " + lookahead.getName());
    System.err.println("");
  }

  public void yyerror(Parser.Location loc, String msg) {
    if (loc == null)
      System.err.println(msg);
    else
      System.err.println(loc + ": " + msg);
  }

  public int token(int yytype){
	if (DEBUGGING) {
		System.err.printf ("*** token(%d): %s\n", yytype, yytext());
	}
	return yytype;
  }

  public int token(int yytype, Object lVal){
  	this.lVal = lVal;
  	return token(yytype);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int nextToken() throws java.io.IOException, java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 96: break;
          case 2:
            { return token('!');
            }
            // fall through
          case 97: break;
          case 3:
            { return token('%');
            }
            // fall through
          case 98: break;
          case 4:
            { return token('&');
            }
            // fall through
          case 99: break;
          case 5:
            { return token('(');
            }
            // fall through
          case 100: break;
          case 6:
            { return token(')');
            }
            // fall through
          case 101: break;
          case 7:
            { return token('*');
            }
            // fall through
          case 102: break;
          case 8:
            { return token('+');
            }
            // fall through
          case 103: break;
          case 9:
            { return token(',');
            }
            // fall through
          case 104: break;
          case 10:
            { return token('-');
            }
            // fall through
          case 105: break;
          case 11:
            { return token('.');
            }
            // fall through
          case 106: break;
          case 12:
            { return token('/');
            }
            // fall through
          case 107: break;
          case 13:
            { return token(NUMBER_INTEGER, new Integer(yytext()));
            }
            // fall through
          case 108: break;
          case 14:
            { return token(':');
            }
            // fall through
          case 109: break;
          case 15:
            { return token(';');
            }
            // fall through
          case 110: break;
          case 16:
            { return token('<');
            }
            // fall through
          case 111: break;
          case 17:
            { return token('>');
            }
            // fall through
          case 112: break;
          case 18:
            { return token('?');
            }
            // fall through
          case 113: break;
          case 19:
            { return token(IDENTIFIER, yytext());
            }
            // fall through
          case 114: break;
          case 20:
            { return token('[');
            }
            // fall through
          case 115: break;
          case 21:
            { return token(']');
            }
            // fall through
          case 116: break;
          case 22:
            { return token('{');
            }
            // fall through
          case 117: break;
          case 23:
            { return token('|');
            }
            // fall through
          case 118: break;
          case 24:
            { return token('}');
            }
            // fall through
          case 119: break;
          case 25:
            { return token(BANG_EQ);
            }
            // fall through
          case 120: break;
          case 26:
            { return token(LITTERAL_STRING, yytext());
            }
            // fall through
          case 121: break;
          case 27:
            { return token(PERC_ASSIGN);
            }
            // fall through
          case 122: break;
          case 28:
            { return token(AMP_AMP);
            }
            // fall through
          case 123: break;
          case 29:
            { return token(AMP_ASSIGN);
            }
            // fall through
          case 124: break;
          case 30:
            { return token(token(TIMES_ASSIGN));
            }
            // fall through
          case 125: break;
          case 31:
            { return token(PLUS_PLUS);
            }
            // fall through
          case 126: break;
          case 32:
            { return token(PLUS_ASSIGN);
            }
            // fall through
          case 127: break;
          case 33:
            { return token(MINUS_MINUS);
            }
            // fall through
          case 128: break;
          case 34:
            { return token(MINUS_ASSIGN);
            }
            // fall through
          case 129: break;
          case 35:
            { return token(DOTS);
            }
            // fall through
          case 130: break;
          case 36:
            { System.err.println("*** comments");
            }
            // fall through
          case 131: break;
          case 37:
            { return token(DIV_ASSIGN);
            }
            // fall through
          case 132: break;
          case 38:
            { return token(ASSIGN);
            }
            // fall through
          case 133: break;
          case 39:
            { return token(LT_LT);
            }
            // fall through
          case 134: break;
          case 40:
            { return token(LT_EQ);
            }
            // fall through
          case 135: break;
          case 41:
            { return token(EQ_EQ);
            }
            // fall through
          case 136: break;
          case 42:
            { return token(GT_EQ);
            }
            // fall through
          case 137: break;
          case 43:
            { return token(GT_GT);
            }
            // fall through
          case 138: break;
          case 44:
            { return token(DO);
            }
            // fall through
          case 139: break;
          case 45:
            { return token(IF);
            }
            // fall through
          case 140: break;
          case 46:
            { return token(IN);
            }
            // fall through
          case 141: break;
          case 47:
            { return token(PIPE_ASSIGN);
            }
            // fall through
          case 142: break;
          case 48:
            { return token(PIPE_PIPE);
            }
            // fall through
          case 143: break;
          case 49:
            { return token(AMP_AMP_ASSIGN);
            }
            // fall through
          case 144: break;
          case 50:
            { return token(LITTERAL_CHAR, yytext());
            }
            // fall through
          case 145: break;
          case 51:
            { return token(NUMBER_FLOAT, new Float(yytext()));
            }
            // fall through
          case 146: break;
          case 52:
            { return token(LT_LT_ASSIGN);
            }
            // fall through
          case 147: break;
          case 53:
            { return token(GT_GT_ASSIGN);
            }
            // fall through
          case 148: break;
          case 54:
            { return token(FOR);
            }
            // fall through
          case 149: break;
          case 55:
            { return token(MAP);
            }
            // fall through
          case 150: break;
          case 56:
            { return token(SET);
            }
            // fall through
          case 151: break;
          case 57:
            { return token(PIPE_PIPE_ASSIGN);
            }
            // fall through
          case 152: break;
          case 58:
            { return token(CHAR);
            }
            // fall through
          case 153: break;
          case 59:
            { return token(ELSE);
            }
            // fall through
          case 154: break;
          case 60:
            { return token(ENUM);
            }
            // fall through
          case 155: break;
          case 61:
            { return token(LIST);
            }
            // fall through
          case 156: break;
          case 62:
            { return token(MAIN);
            }
            // fall through
          case 157: break;
          case 63:
            { return token(NEW);
            }
            // fall through
          case 158: break;
          case 64:
            { return token(NULL);
            }
            // fall through
          case 159: break;
          case 65:
            { return token(THIS);
            }
            // fall through
          case 160: break;
          case 66:
            { return token(TYPE);
            }
            // fall through
          case 161: break;
          case 67:
            { return token(BREAK);
            }
            // fall through
          case 162: break;
          case 68:
            { return token(CLASS);
            }
            // fall through
          case 163: break;
          case 69:
            { return token(CONST);
            }
            // fall through
          case 164: break;
          case 70:
            { return token(FINAL);
            }
            // fall through
          case 165: break;
          case 71:
            { return token(FLOAT);
            }
            // fall through
          case 166: break;
          case 72:
            { return token(RANGE);
            }
            // fall through
          case 167: break;
          case 73:
            { return token(WHILE);
            }
            // fall through
          case 168: break;
          case 74:
            { return token(WRITE);
            }
            // fall through
          case 169: break;
          case 75:
            { return token(IMPORT);
            }
            // fall through
          case 170: break;
          case 76:
            { return token(PUBLIC);
            }
            // fall through
          case 171: break;
          case 77:
            { return token(READLN);
            }
            // fall through
          case 172: break;
          case 78:
            { return token(RETURN);
            }
            // fall through
          case 173: break;
          case 79:
            { return token(STRING);
            }
            // fall through
          case 174: break;
          case 80:
            { return token(BOOLEAN);
            }
            // fall through
          case 175: break;
          case 81:
            { return token(FOREACH);
            }
            // fall through
          case 176: break;
          case 82:
            { return token(INTEGER);
            }
            // fall through
          case 177: break;
          case 83:
            { return token(PRIVATE);
            }
            // fall through
          case 178: break;
          case 84:
            { return token(VIRTUAL);
            }
            // fall through
          case 179: break;
          case 85:
            { return token(WRITELN);
            }
            // fall through
          case 180: break;
          case 86:
            { return token(CONTINUE);
            }
            // fall through
          case 181: break;
          case 87:
            { return token(EXTENDS);
            }
            // fall through
          case 182: break;
          case 88:
            { return token(FUNCTION);
            }
            // fall through
          case 183: break;
          case 89:
            { return token(OPERATOR);
            }
            // fall through
          case 184: break;
          case 90:
            { return token(INTERFACE);
            }
            // fall through
          case 185: break;
          case 91:
            { return token(PROCEDURE);
            }
            // fall through
          case 186: break;
          case 92:
            { return token(PROTECTED);
            }
            // fall through
          case 187: break;
          case 93:
            { return token(COMPARABLE);
            }
            // fall through
          case 188: break;
          case 94:
            { return token(EQUIVALENT);
            }
            // fall through
          case 189: break;
          case 95:
            { return token(IMPLEMENTS);
            }
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
