// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/Lexer.jflex

import java.io.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int COMMENT_DOC = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\24\0\1\3\1\4\6\0\1\5"+
    "\4\0\1\6\1\7\11\10\6\0\1\11\32\12\1\0"+
    "\1\13\2\0\1\12\1\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\12\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\12\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\12\1\41\1\42\12\0\1\2"+
    "\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\4\1\22\3\2\4\1\0\1\1"+
    "\1\5\1\1\1\6\1\0\1\7\1\10\1\0\1\11"+
    "\7\3\1\12\7\3\1\13\25\3\1\14\3\0\1\5"+
    "\1\0\1\6\16\3\1\15\3\3\1\16\2\3\1\17"+
    "\20\3\1\20\7\3\2\0\1\21\1\3\1\22\1\3"+
    "\1\23\6\3\1\24\1\25\3\3\1\26\1\3\1\27"+
    "\16\3\1\30\1\3\1\31\5\3\1\32\1\3\2\0"+
    "\1\33\1\34\1\35\1\36\5\3\1\37\1\40\11\3"+
    "\1\41\6\3\1\42\3\3\1\43\1\3\1\44\1\3"+
    "\1\45\2\0\2\3\1\46\1\47\1\50\1\51\1\52"+
    "\4\3\1\53\1\3\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\2\3\1\62\3\3\2\0\1\3\1\63\2\3"+
    "\1\64\3\3\1\65\2\3\1\66\1\67\1\70\1\3"+
    "\1\71\1\3\1\72\1\73\1\74\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\214\0\322"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\257\0\u03d4\0\u03f7"+
    "\0\u041a\0\257\0\u043d\0\214\0\u0460\0\257\0\u0483\0\u04a6"+
    "\0\u0118\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b"+
    "\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3"+
    "\0\u015e\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8"+
    "\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0"+
    "\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\257\0\u09b5"+
    "\0\u041a\0\u043d\0\u041a\0\u09d8\0\257\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u015e\0\u0be5\0\u0c08\0\u0c2b\0\u015e"+
    "\0\u0c4e\0\u0c71\0\u015e\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20"+
    "\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38"+
    "\0\u0e5b\0\u0e7e\0\u0ea1\0\u015e\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u015e\0\u0fff\0\u015e"+
    "\0\u1022\0\u015e\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4"+
    "\0\u1117\0\u015e\0\u113a\0\u115d\0\u1180\0\u015e\0\u11a3\0\u015e"+
    "\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u015e\0\u13b0"+
    "\0\u015e\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u015e\0\u1482"+
    "\0\u14a5\0\u14c8\0\u015e\0\u015e\0\u015e\0\u015e\0\u14eb\0\u150e"+
    "\0\u1531\0\u1554\0\u1577\0\u015e\0\u015e\0\u159a\0\u15bd\0\u15e0"+
    "\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u015e\0\u16d5"+
    "\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u015e\0\u17a7\0\u17ca"+
    "\0\u17ed\0\u015e\0\u1810\0\u015e\0\u1833\0\u015e\0\u1856\0\u1879"+
    "\0\u189c\0\u18bf\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u18e2"+
    "\0\u1905\0\u1928\0\u194b\0\u015e\0\u196e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u1991\0\u19b4\0\u015e\0\u19d7\0\u19fa"+
    "\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u015e\0\u1aa9\0\u1acc\0\u015e"+
    "\0\u1aef\0\u1b12\0\u1b35\0\u015e\0\u1b58\0\u1b7b\0\u015e\0\u1b9e"+
    "\0\u015e\0\u1bc1\0\u015e\0\u1be4\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\5\1\14\1\5\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\14\1\23\1\14\1\24\1\14\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\14\5\36\1\37\35\36\11\0\1\40\31\0\3\41"+
    "\1\42\7\41\1\43\27\41\7\0\2\44\104\0\2\44"+
    "\13\0\1\45\23\0\1\46\1\47\2\44\32\0\1\50"+
    "\2\0\4\50\2\44\32\50\7\0\2\51\41\0\2\14"+
    "\1\0\1\14\1\0\27\14\7\0\2\14\1\0\1\14"+
    "\1\0\15\14\1\52\1\14\1\53\7\14\7\0\2\14"+
    "\1\0\1\14\1\0\1\54\6\14\1\55\2\14\1\56"+
    "\2\14\1\57\11\14\7\0\2\14\1\0\1\14\1\0"+
    "\4\14\1\60\10\14\1\61\11\14\7\0\2\14\1\0"+
    "\1\14\1\0\12\14\1\62\1\14\1\63\12\14\7\0"+
    "\2\14\1\0\1\14\1\0\1\64\11\14\1\65\2\14"+
    "\1\66\1\14\1\67\7\14\7\0\2\14\1\0\1\14"+
    "\1\0\15\14\1\70\11\14\7\0\2\14\1\0\1\14"+
    "\1\0\5\14\1\71\6\14\1\72\12\14\7\0\2\14"+
    "\1\0\1\14\1\0\15\14\1\73\11\14\7\0\2\14"+
    "\1\0\1\14\1\0\1\74\3\14\1\75\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\16\14\1\76\10\14\7\0"+
    "\2\14\1\0\1\14\1\0\17\14\1\77\2\14\1\100"+
    "\4\14\7\0\2\14\1\0\1\14\1\0\4\14\1\101"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\7\14\1\102"+
    "\1\103\10\14\1\104\2\14\1\105\2\14\7\0\2\14"+
    "\1\0\1\14\1\0\4\14\1\106\2\14\1\107\7\14"+
    "\1\110\5\14\1\111\1\14\7\0\2\14\1\0\1\14"+
    "\1\0\14\14\1\112\3\14\1\113\6\14\7\0\2\14"+
    "\1\0\1\14\1\0\10\14\1\114\4\14\1\115\11\14"+
    "\7\0\2\14\1\0\1\14\1\0\7\14\1\116\17\14"+
    "\6\0\1\117\50\0\1\120\26\0\3\121\1\42\7\121"+
    "\1\122\32\121\1\123\7\121\1\122\27\121\30\0\1\124"+
    "\12\0\1\47\1\0\41\47\7\0\2\125\41\0\2\14"+
    "\1\0\1\14\1\0\15\14\1\126\11\14\7\0\2\14"+
    "\1\0\1\14\1\0\4\14\1\127\22\14\7\0\2\14"+
    "\1\0\1\14\1\0\20\14\1\130\1\131\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\1\132\26\14\7\0\2\14"+
    "\1\0\1\14\1\0\1\133\26\14\7\0\2\14\1\0"+
    "\1\14\1\0\14\14\1\134\12\14\7\0\2\14\1\0"+
    "\1\14\1\0\5\14\1\135\4\14\1\136\14\14\7\0"+
    "\2\14\1\0\1\14\1\0\22\14\1\137\4\14\7\0"+
    "\2\14\1\0\1\14\1\0\20\14\1\140\6\14\7\0"+
    "\2\14\1\0\1\14\1\0\22\14\1\141\4\14\7\0"+
    "\2\14\1\0\1\14\1\0\12\14\1\142\14\14\7\0"+
    "\2\14\1\0\1\14\1\0\15\14\1\143\11\14\7\0"+
    "\2\14\1\0\1\14\1\0\17\14\1\144\7\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\145\16\14\7\0"+
    "\2\14\1\0\1\14\1\0\21\14\1\146\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\12\14\1\147\6\14\1\150"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\14\14\1\151"+
    "\12\14\7\0\2\14\1\0\1\14\1\0\13\14\1\152"+
    "\13\14\7\0\2\14\1\0\1\14\1\0\24\14\1\153"+
    "\2\14\7\0\2\14\1\0\1\14\1\0\4\14\1\154"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\10\14\1\155"+
    "\4\14\1\156\11\14\7\0\2\14\1\0\1\14\1\0"+
    "\1\14\1\157\25\14\7\0\2\14\1\0\1\14\1\0"+
    "\6\14\1\160\12\14\1\161\5\14\7\0\2\14\1\0"+
    "\1\14\1\0\15\14\1\162\11\14\7\0\2\14\1\0"+
    "\1\14\1\0\6\14\1\163\17\14\1\164\7\0\2\14"+
    "\1\0\1\14\1\0\1\165\16\14\1\166\7\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\167\16\14\7\0"+
    "\2\14\1\0\1\14\1\0\13\14\1\170\13\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\171\6\14\1\172"+
    "\7\14\7\0\2\14\1\0\1\14\1\0\22\14\1\173"+
    "\2\14\1\174\1\14\7\0\2\14\1\0\1\14\1\0"+
    "\16\14\1\175\10\14\7\0\2\14\1\0\1\14\1\0"+
    "\10\14\1\176\7\14\1\177\6\14\7\0\2\14\1\0"+
    "\1\14\1\0\10\14\1\200\16\14\7\0\2\14\1\0"+
    "\1\14\1\0\17\14\1\201\7\14\7\0\2\14\1\0"+
    "\1\14\1\0\10\14\1\202\16\14\7\0\2\14\1\0"+
    "\1\14\1\0\10\14\1\203\16\14\36\0\1\204\22\0"+
    "\1\205\33\0\2\14\1\0\1\14\1\0\12\14\1\206"+
    "\14\14\7\0\2\14\1\0\1\14\1\0\1\207\26\14"+
    "\7\0\2\14\1\0\1\14\1\0\4\14\1\210\22\14"+
    "\7\0\2\14\1\0\1\14\1\0\2\14\1\211\24\14"+
    "\7\0\2\14\1\0\1\14\1\0\17\14\1\212\7\14"+
    "\7\0\2\14\1\0\1\14\1\0\20\14\1\213\6\14"+
    "\7\0\2\14\1\0\1\14\1\0\20\14\1\214\1\215"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\1\216\26\14"+
    "\7\0\2\14\1\0\1\14\1\0\4\14\1\217\22\14"+
    "\7\0\2\14\1\0\1\14\1\0\1\14\1\220\25\14"+
    "\7\0\2\14\1\0\1\14\1\0\4\14\1\221\22\14"+
    "\7\0\2\14\1\0\1\14\1\0\13\14\1\222\13\14"+
    "\7\0\2\14\1\0\1\14\1\0\20\14\1\223\6\14"+
    "\7\0\2\14\1\0\1\14\1\0\1\224\26\14\7\0"+
    "\2\14\1\0\1\14\1\0\4\14\1\225\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\15\14\1\226\11\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\227\16\14\7\0"+
    "\2\14\1\0\1\14\1\0\6\14\1\230\20\14\7\0"+
    "\2\14\1\0\1\14\1\0\4\14\1\231\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\17\14\1\232\7\14\7\0"+
    "\2\14\1\0\1\14\1\0\23\14\1\233\3\14\7\0"+
    "\2\14\1\0\1\14\1\0\21\14\1\234\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\12\14\1\235\14\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\236\16\14\7\0"+
    "\2\14\1\0\1\14\1\0\22\14\1\237\4\14\7\0"+
    "\2\14\1\0\1\14\1\0\17\14\1\240\7\14\7\0"+
    "\2\14\1\0\1\14\1\0\14\14\1\241\12\14\7\0"+
    "\2\14\1\0\1\14\1\0\4\14\1\242\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\21\14\1\243\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\22\14\1\244\4\14\7\0"+
    "\2\14\1\0\1\14\1\0\21\14\1\245\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\16\14\1\246\10\14\7\0"+
    "\2\14\1\0\1\14\1\0\20\14\1\247\6\14\7\0"+
    "\2\14\1\0\1\14\1\0\15\14\1\250\11\14\7\0"+
    "\2\14\1\0\1\14\1\0\4\14\1\251\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\4\14\1\252\22\14\7\0"+
    "\2\14\1\0\1\14\1\0\15\14\1\253\11\14\7\0"+
    "\2\14\1\0\1\14\1\0\10\14\1\254\16\14\7\0"+
    "\2\14\1\0\1\14\1\0\14\14\1\255\12\14\7\0"+
    "\2\14\1\0\1\14\1\0\21\14\1\256\5\14\7\0"+
    "\2\14\1\0\1\14\1\0\3\14\1\257\23\14\7\0"+
    "\2\14\1\0\1\14\1\0\12\14\1\260\14\14\35\0"+
    "\1\261\33\0\1\262\23\0\2\14\1\0\1\14\1\0"+
    "\11\14\1\263\15\14\7\0\2\14\1\0\1\14\1\0"+
    "\7\14\1\264\17\14\7\0\2\14\1\0\1\14\1\0"+
    "\20\14\1\265\6\14\7\0\2\14\1\0\1\14\1\0"+
    "\21\14\1\266\5\14\7\0\2\14\1\0\1\14\1\0"+
    "\10\14\1\267\16\14\7\0\2\14\1\0\1\14\1\0"+
    "\22\14\1\270\4\14\7\0\2\14\1\0\1\14\1\0"+
    "\21\14\1\271\5\14\7\0\2\14\1\0\1\14\1\0"+
    "\12\14\1\272\14\14\7\0\2\14\1\0\1\14\1\0"+
    "\10\14\1\273\16\14\7\0\2\14\1\0\1\14\1\0"+
    "\4\14\1\274\22\14\7\0\2\14\1\0\1\14\1\0"+
    "\21\14\1\275\5\14\7\0\2\14\1\0\1\14\1\0"+
    "\14\14\1\276\12\14\7\0\2\14\1\0\1\14\1\0"+
    "\14\14\1\277\12\14\7\0\2\14\1\0\1\14\1\0"+
    "\20\14\1\300\6\14\7\0\2\14\1\0\1\14\1\0"+
    "\1\301\26\14\7\0\2\14\1\0\1\14\1\0\1\302"+
    "\26\14\7\0\2\14\1\0\1\14\1\0\4\14\1\303"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\10\14\1\304"+
    "\16\14\7\0\2\14\1\0\1\14\1\0\20\14\1\305"+
    "\6\14\7\0\2\14\1\0\1\14\1\0\17\14\1\306"+
    "\7\14\7\0\2\14\1\0\1\14\1\0\21\14\1\307"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\4\14\1\310"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\15\14\1\311"+
    "\11\14\7\0\2\14\1\0\1\14\1\0\10\14\1\312"+
    "\16\14\7\0\2\14\1\0\1\14\1\0\2\14\1\313"+
    "\24\14\7\0\2\14\1\0\1\14\1\0\2\14\1\314"+
    "\24\14\7\0\2\14\1\0\1\14\1\0\12\14\1\315"+
    "\14\14\7\0\2\14\1\0\1\14\1\0\24\14\1\316"+
    "\2\14\7\0\2\14\1\0\1\14\1\0\3\14\1\317"+
    "\4\14\1\320\3\14\1\321\12\14\7\0\2\14\1\0"+
    "\1\14\1\0\14\14\1\322\12\14\7\0\2\14\1\0"+
    "\1\14\1\0\6\14\1\323\20\14\7\0\2\14\1\0"+
    "\1\14\1\0\6\14\1\324\20\14\7\0\2\14\1\0"+
    "\1\14\1\0\22\14\1\325\4\14\7\0\2\14\1\0"+
    "\1\14\1\0\4\14\1\326\22\14\23\0\1\327\55\0"+
    "\1\330\13\0\2\14\1\0\1\14\1\0\14\14\1\331"+
    "\12\14\7\0\2\14\1\0\1\14\1\0\12\14\1\332"+
    "\14\14\7\0\2\14\1\0\1\14\1\0\4\14\1\333"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\4\14\1\334"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\5\14\1\335"+
    "\21\14\7\0\2\14\1\0\1\14\1\0\3\14\1\336"+
    "\23\14\7\0\2\14\1\0\1\14\1\0\4\14\1\337"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\16\14\1\340"+
    "\10\14\7\0\2\14\1\0\1\14\1\0\21\14\1\341"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\21\14\1\342"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\2\14\1\343"+
    "\24\14\7\0\2\14\1\0\1\14\1\0\2\14\1\344"+
    "\24\14\7\0\2\14\1\0\1\14\1\0\21\14\1\345"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\14\14\1\346"+
    "\12\14\7\0\2\14\1\0\1\14\1\0\3\14\1\347"+
    "\23\14\7\0\2\14\1\0\1\14\1\0\5\14\1\350"+
    "\21\14\7\0\2\14\1\0\1\14\1\0\2\14\1\351"+
    "\24\14\7\0\2\14\1\0\1\14\1\0\21\14\1\352"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\7\14\1\353"+
    "\17\14\7\0\2\14\1\0\1\14\1\0\1\354\26\14"+
    "\7\0\2\14\1\0\1\14\1\0\4\14\1\355\22\14"+
    "\7\0\2\14\1\0\1\14\1\0\3\14\1\356\23\14"+
    "\7\0\2\14\1\0\1\14\1\0\1\357\26\14\7\0"+
    "\2\14\1\0\1\14\1\0\14\14\1\360\12\14\7\0"+
    "\2\14\1\0\1\14\1\0\1\361\26\14\31\0\1\362"+
    "\30\0\1\363\32\0\2\14\1\0\1\14\1\0\22\14"+
    "\1\364\4\14\7\0\2\14\1\0\1\14\1\0\21\14"+
    "\1\365\5\14\7\0\2\14\1\0\1\14\1\0\1\366"+
    "\26\14\7\0\2\14\1\0\1\14\1\0\15\14\1\367"+
    "\11\14\7\0\2\14\1\0\1\14\1\0\4\14\1\370"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\21\14\1\371"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\4\14\1\372"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\21\14\1\373"+
    "\5\14\7\0\2\14\1\0\1\14\1\0\5\14\1\374"+
    "\21\14\7\0\2\14\1\0\1\14\1\0\13\14\1\375"+
    "\13\14\7\0\2\14\1\0\1\14\1\0\4\14\1\376"+
    "\22\14\7\0\2\14\1\0\1\14\1\0\12\14\1\377"+
    "\14\14\33\0\1\6\27\0\1\u0100\31\0\2\14\1\0"+
    "\1\14\1\0\4\14\1\u0101\22\14\7\0\2\14\1\0"+
    "\1\14\1\0\2\14\1\u0102\24\14\7\0\2\14\1\0"+
    "\1\14\1\0\17\14\1\u0103\7\14\7\0\2\14\1\0"+
    "\1\14\1\0\4\14\1\u0104\22\14\7\0\2\14\1\0"+
    "\1\14\1\0\17\14\1\u0105\7\14\7\0\2\14\1\0"+
    "\1\14\1\0\4\14\1\u0106\22\14\7\0\2\14\1\0"+
    "\1\14\1\0\4\14\1\u0107\22\14\7\0\2\14\1\0"+
    "\1\14\1\0\3\14\1\u0108\23\14\1\u0100\1\0\41\u0100"+
    "\7\0\2\14\1\0\1\14\1\0\4\14\1\u0109\22\14"+
    "\7\0\2\14\1\0\1\14\1\0\3\14\1\u010a\23\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7175];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\27\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\11\1\1\1\0\46\1\1\11"+
    "\3\0\1\1\1\0\1\11\56\1\2\0\53\1\2\0"+
    "\44\1\2\0\31\1\2\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 64: break;
          case 2:
            { yybegin(STRING); return new Token(Sym.STRING,null,yyline,yycolumn);
            }
            // fall through
          case 65: break;
          case 3:
            { return new Token(Sym.IDENTIFIER, yytext(),yyline,yycolumn);
            }
            // fall through
          case 66: break;
          case 4:
            { ;
            }
            // fall through
          case 67: break;
          case 5:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 6:
            { return new Token(Sym.REAL,(new Float(yytext())),yyline,yycolumn);
            }
            // fall through
          case 69: break;
          case 7:
            { yybegin(COMMENT);return new Token(Sym.COMMENT,null,yyline,yycolumn);
            }
            // fall through
          case 70: break;
          case 8:
            { return new Token(Sym.COMMENT,null,yyline,yycolumn);
            }
            // fall through
          case 71: break;
          case 9:
            { return new Token(Sym.INTEGER,(new Integer(yytext())),yyline,yycolumn);
            }
            // fall through
          case 72: break;
          case 10:
            { return new Token(Sym.DO,null,yyline,yycolumn);
            }
            // fall through
          case 73: break;
          case 11:
            { return new Token(Sym.IF,null,yyline,yycolumn);
            }
            // fall through
          case 74: break;
          case 12:
            { yybegin(YYINITIAL);return new Token(Sym.ENDCOMMENT,null,yyline,yycolumn);
            }
            // fall through
          case 75: break;
          case 13:
            { return new Token(Sym.FOR,null,yyline,yycolumn);
            }
            // fall through
          case 76: break;
          case 14:
            { return new Token(Sym.INT,null,yyline,yycolumn);
            }
            // fall through
          case 77: break;
          case 15:
            { return new Token(Sym.NEW,null,yyline,yycolumn);
            }
            // fall through
          case 78: break;
          case 16:
            { return new Token(Sym.TRY,null,yyline,yycolumn);
            }
            // fall through
          case 79: break;
          case 17:
            { return new Token(Sym.BOOL,null,yyline,yycolumn);
            }
            // fall through
          case 80: break;
          case 18:
            { return new Token(Sym.CASE,null,yyline,yycolumn);
            }
            // fall through
          case 81: break;
          case 19:
            { return new Token(Sym.CHAR,null,yyline,yycolumn);
            }
            // fall through
          case 82: break;
          case 20:
            { return new Token(Sym.ELSE,null,yyline,yycolumn);
            }
            // fall through
          case 83: break;
          case 21:
            { return new Token(Sym.ENUM,null,yyline,yycolumn);
            }
            // fall through
          case 84: break;
          case 22:
            { return new Token(Sym.GOTO,null,yyline,yycolumn);
            }
            // fall through
          case 85: break;
          case 23:
            { return new Token(Sym.LONG,null,yyline,yycolumn);
            }
            // fall through
          case 86: break;
          case 24:
            { return new Token(Sym.THIS,null,yyline,yycolumn);
            }
            // fall through
          case 87: break;
          case 25:
            { return new Token(Sym.TRUE,null,yyline,yycolumn);
            }
            // fall through
          case 88: break;
          case 26:
            { return new Token(Sym.VOID,null,yyline,yycolumn);
            }
            // fall through
          case 89: break;
          case 27:
            { return new Token(Sym.BREAK,null,yyline,yycolumn);
            }
            // fall through
          case 90: break;
          case 28:
            { return new Token(Sym.CATCH,null,yyline,yycolumn);
            }
            // fall through
          case 91: break;
          case 29:
            { return new Token(Sym.CLASS,null,yyline,yycolumn);
            }
            // fall through
          case 92: break;
          case 30:
            { return new Token(Sym.CONST,null,yyline,yycolumn);
            }
            // fall through
          case 93: break;
          case 31:
            { return new Token(Sym.FALSE,null,yyline,yycolumn);
            }
            // fall through
          case 94: break;
          case 32:
            { return new Token(Sym.FLOAT,null,yyline,yycolumn);
            }
            // fall through
          case 95: break;
          case 33:
            { return new Token(Sym.SHORT,null,yyline,yycolumn);
            }
            // fall through
          case 96: break;
          case 34:
            { return new Token(Sym.THROW,null,yyline,yycolumn);
            }
            // fall through
          case 97: break;
          case 35:
            { return new Token(Sym.UNION,null,yyline,yycolumn);
            }
            // fall through
          case 98: break;
          case 36:
            { return new Token(Sym.USING,null,yyline,yycolumn);
            }
            // fall through
          case 99: break;
          case 37:
            { return new Token(Sym.WHILE,null,yyline,yycolumn);
            }
            // fall through
          case 100: break;
          case 38:
            { return new Token(Sym.DELETE,null,yyline,yycolumn);
            }
            // fall through
          case 101: break;
          case 39:
            { return new Token(Sym.DOUBLE,null,yyline,yycolumn);
            }
            // fall through
          case 102: break;
          case 40:
            { return new Token(Sym.ELSEIF,null,yyline,yycolumn);
            }
            // fall through
          case 103: break;
          case 41:
            { return new Token(Sym.FRIEND,null,yyline,yycolumn);
            }
            // fall through
          case 104: break;
          case 42:
            { return new Token(Sym.INLINE,null,yyline,yycolumn);
            }
            // fall through
          case 105: break;
          case 43:
            { return new Token(Sym.PUBLIC,null,yyline,yycolumn);
            }
            // fall through
          case 106: break;
          case 44:
            { return new Token(Sym.RETURN,null,yyline,yycolumn);
            }
            // fall through
          case 107: break;
          case 45:
            { return new Token(Sym.SIGNED,null,yyline,yycolumn);
            }
            // fall through
          case 108: break;
          case 46:
            { return new Token(Sym.SIZEOF,null,yyline,yycolumn);
            }
            // fall through
          case 109: break;
          case 47:
            { return new Token(Sym.STATIC,null,yyline,yycolumn);
            }
            // fall through
          case 110: break;
          case 48:
            { return new Token(Sym.STRUCT,null,yyline,yycolumn);
            }
            // fall through
          case 111: break;
          case 49:
            { return new Token(Sym.SWITCH,null,yyline,yycolumn);
            }
            // fall through
          case 112: break;
          case 50:
            { return new Token(Sym.TYPEID,null,yyline,yycolumn);
            }
            // fall through
          case 113: break;
          case 51:
            { return new Token(Sym.DEFAULT,null,yyline,yycolumn);
            }
            // fall through
          case 114: break;
          case 52:
            { return new Token(Sym.PRIVATE,null,yyline,yycolumn);
            }
            // fall through
          case 115: break;
          case 53:
            { return new Token(Sym.TYPEDEF,null,yyline,yycolumn);
            }
            // fall through
          case 116: break;
          case 54:
            { return new Token(Sym.VIRTUAL,null,yyline,yycolumn);
            }
            // fall through
          case 117: break;
          case 55:
            { return new Token(Sym.INCLUDE,null,yyline,yycolumn);
            }
            // fall through
          case 118: break;
          case 56:
            { return new Token(Sym.CONTINUE,null,yyline,yycolumn);
            }
            // fall through
          case 119: break;
          case 57:
            { return new Token(Sym.OPERATOR,null,yyline,yycolumn);
            }
            // fall through
          case 120: break;
          case 58:
            { return new Token(Sym.REGISTER,null,yyline,yycolumn);
            }
            // fall through
          case 121: break;
          case 59:
            { return new Token(Sym.TEMPLATE,null,yyline,yycolumn);
            }
            // fall through
          case 122: break;
          case 60:
            { return new Token(Sym.TYPENAME,null,yyline,yycolumn);
            }
            // fall through
          case 123: break;
          case 61:
            { return new Token(Sym.UNSIGNED,null,yyline,yycolumn);
            }
            // fall through
          case 124: break;
          case 62:
            { return new Token(Sym.NAMESPACE,null,yyline,yycolumn);
            }
            // fall through
          case 125: break;
          case 63:
            { return new Token(Sym.PROTECTED,null,yyline,yycolumn);
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
